#!/usr/bin/env python

# Importing the required libraries
import rospy
from ar_week8_test.msg import cubic_traj_params
from ar_week8_test.msg import cubic_traj_coeffs
from ar_week8_test.srv import compute_cubic_traj

# Line below creates the publisher which will allow to publish to the "coeffs" topic, messages of type "cubic_traj_coeffs"
pub = rospy.Publisher('coeffs', cubic_traj_coeffs, queue_size=10)

# Callback function computes the coefficients from the received data using the service and then publishes the coefficients to the "coeffs" topic
def callback(data):

    coeffs = cubic_traj_coeffs() # creating object of type "cubic_traj_coeffs"


    rospy.wait_for_service('compute_coeffs') # waits until the service is ready to serve as it may be serving other nodes
    
    # try/catch block used to catch any errors generated by the execution of the code below
    try:
        
        compute_coeffs = rospy.ServiceProxy('compute_coeffs', compute_cubic_traj) # Returns a callable instance of the service
        resp1 = compute_coeffs(data.p0, data.pf, data.v0, data.vf, data.t0, data.tf) # calling the service with the appropriate parameters
        # response contains the coefficients which are used to populate the coeffs object
        coeffs.a0 = resp1.a0
        coeffs.a1 = resp1.a1
        coeffs.a2 = resp1.a2
        coeffs.a3 = resp1.a3
        coeffs.t0 = data.t0
        coeffs.tf = data.tf

        
        pub.publish(coeffs) # the coefficients are published to the "coeffs" topic
        
        #rospy.loginfo(coeffs) used for debugging
        
    #catching exception   
    except rospy.ServiceException as e:
        print("Service call failed: %s"%e)  
    
def planner():

    rospy.init_node('planner', anonymous=True) # Initialising the "generator" node
    # Line below makes the current node listen to the "params" topic where it will receive messages of type "cubic_traj_params"
    # When message is received the callback function will be called with the received message as argument
    rospy.Subscriber("params", cubic_traj_params, callback)

    

    # spin() prevents python from exiting until this node is stopped
    rospy.spin()

# This checks if the file is being executed as a the main file and not by another file
if __name__ == '__main__':
    # Calls the planner() function
    planner()